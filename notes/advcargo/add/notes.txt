A workspace is a set of packages that share the same Cargo.lock and output directory. Let’s make a project using a workspace—we’ll use trivial code so we can concentrate on the structure of the workspace. There are multiple ways to structure a workspace, so we'll just show one common way. We’ll have a workspace containing a binary and two libraries. The binary, which will provide the main functionality, will depend on the two libraries. One library will provide an add_one function, and a second library an add_two function. These three crates will be part of the same workspace.


Cargo.toml won’t have a [package] section. Instead, it will start with a [workspace] section that will allow us to add members to the workspace by specifying the path to the package with our binary crate


Next, we’ll create the adder binary crate by running cargo new within the add directory 
$ cargo new adder


now you can build with ----> $ cargo build


if we compile this code target directory will be created outside rather than inside of the adder directory
because we want multiple crates to compile as one package


create a second crate using ----> $ cargo new add_one --lib
then add it to the Cargo.toml


we can add the path to other library crates inside Cargo.toml file of the crate tht uses the library


$ cargo run -p adder ----> we can specify which package to run inside workspace using this


Notice that the workspace has only one Cargo.lock file at the top level, rather than having a Cargo.lock in each crate’s directory. This ensures that all crates are using the same version of all dependencies. If we add the rand package to the adder/Cargo.toml and add_one/Cargo.toml files, Cargo will resolve both of those to one version of rand and record that in the one Cargo.lock. Making all crates in the workspace use the same dependencies means the crates will always be compatible with each other.


we can add a library to multiple crates inside a workspace
but cargo will only generates one Cargo.lock file
cargo makes sure that you use the same version of a package in all crates


$ cargo test ----> will run tests for all the crates inside a workspace


$ cargo test -p add_one ----> to run tests only for a specific workspace


to publish work space must publish each crate individually ----> cargo publish -p add_one